// import org.antlr.v4.runtime.ANTLRFileStream;
// import org.antlr.v4.runtime.BailErrorStrategy;
// import org.antlr.v4.runtime.CommonTokenStream;
// import org.antlr.v4.runtime.DiagnosticErrorListener;
// import org.antlr.v4.runtime.Lexer;
// import org.antlr.v4.runtime.ParserRuleContext;
// import org.antlr.v4.runtime.atn.LexerATNSimulator;
// import org.antlr.v4.runtime.atn.PredictionMode;

//int.out.println("Hello");
// import java.awt.Cursor;
// import java.awt.Dialog;
// import java.awt.event.ActionEvent;
// import java.awt.event.ActionListener;
// import java.awt.event.WindowEvent;
// import java.awt.event.WindowListener;
// import java.io.FileInputStream;
// import java.io.FileOutputStream;
// import java.io.IOException;
// import java.io.ObjectInputStream;
// import java.io.ObjectOutputStream;
// import java.io.Serializable;
 
// import javax.swing.JButton;
// import javax.swing.JComboBox;
// import javax.swing.JDialog;
// import javax.swing.JFrame;
// import javax.swing.JLabel;
// import javax.swing.JList;
// import javax.swing.JScrollPane;
// import javax.swing.JTable;
// import javax.swing.JTextField;
// import javax.swing.ListSelectionModel;
// import javax.swing.ScrollPaneConstants;
// import javax.swing.table.AbstractTableModel;


public class Splash /*extends AppCompatActivity*/{
// byte c = (byte)(a+b);
protected void onCreate(Bundle savedInstanceState)
{
            a = (int) ((0.1+0.7) * 10);
    a = "1"+getDate()+"1"+t.getText().toString();

    e = (int) (a / b)*(c - d)*(4 * 3) - (int) (5);
        a = true ? 0 : true ? 1 : 2;
    a = first ? second : third;
        byte c = (byte)(a+b);
    
    super.onCreate(savedInstanceState);
setContentView(R.layout.activity_splash);
new Intent(Splash.this, MainActivity.this);
startActivity(intent);
finish();
}
}




public class Note {
EditText t;
final int cleen=1,rec=2,allapps=3,exit=4;

protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_note);
t=(EditText)findViewById(R.id.editText);
}
public void newNote(View view){
writeFile("\n"+getDate()+"\n"+t.getText().toString(),true);
}
void writeFile(String s,boolean b){
if (!Environment.getExternalStorageState().equals(
Environment.MEDIA_MOUNTED)) {
Toast.makeText(getApplicationContext(),"Память недоступна",
Toast.LENGTH_SHORT).show();
return;
}
File sdPath = Environment.getExternalStorageDirectory();
sdPath = new File(sdPath.getAbsolutePath() + "/" + "MyNotesReester");
sdPath.mkdirs();
File sdFile = new File(sdPath, "notes");
try {
BufferedWriter bw = new BufferedWriter(new FileWriter(sdFile,b));
bw.write(s);
bw.close();
} catch (IOException e) {
e.printStackTrace();
Toast.makeText(getApplicationContext(),"Произошла ошибка",
Toast.LENGTH_SHORT).show();
return;
}
if (!b)Toast.makeText(getApplicationContext(),"Файл перезаписан",Toast.LENGTH_SHORT).show();
}
public void showNotes(View view){
startActivity(new Intent(Note.this,Show.this));
}
private String getDate() {
SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
return dateFormat.format(new Date());
}
public boolean onCreateOptionsMenu(Menu menu) {

// Inflate the menu; this adds items to the action bar if it is present.
getMenuInflater().inflate(R.menu.notebook, menu);
menu.add(0,cleen,0,"Очистить");
menu.add(0,rec,0,"Перезаписать");
menu.add(0,allapps,0,"Приложения");
menu.add(0,exit,0,"ВЫХОД");
return true;
}
public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()){
case cleen:
t.setText("");
break;
case rec:
writeFile("\n"+getDate()+"\n"+t.getText().toString(),false);
break;
case allapps:
try {
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse("market://search?q=developer%20 kalexal&hl=ru"));
startActivity(intent);
}catch (Exception e){
Toast.makeText(getApplicationContext(),"Не найдено ни одного маркета", Toast.LENGTH_LONG).show();
}
break;
case exit:
finish();
break;
}
return super.onOptionsItemSelected(item);
}
}

 public class CalculatorConsole {
/**

*/
public static void main(String[] args) {
String answer,symbol;
float num1=0,num2=0,result=0;
Scanner sc=new Scanner(System.in);
do{
System.out.println("Первое число:");
try{
num1=sc.nextFloat();

}catch(Exception e){
System.out.println("Некорректное значение");
return;
}
Scanner scSymb=new Scanner(System.in);
System.out.println("Знак:");
symbol=scSymb.nextLine();
// if(!"+".equals(symbol)&&!"-".equals(symbol)&&!"*".equals(symbol)&&!"/".equals(symbol)){
// System.out.println("Некорректный символ");
// return;
// }
System.out.println("Второе число:");
try{
num2=sc.nextFloat();
}catch(Exception e){
System.out.println("Некорректное значение");
return;
}
switch(symbol){
case "+":
result=plus(num1, num2);
break;
case "-":
result=minus(num1, num2);
break;
case "*":
result=multiPlus(num1, num2);
break;
case "/":
result=multiMinus(num1, num2);
break;
default:
break;
}
System.out.println(num1+symbol+num2+"="+result);
Scanner scAns=new Scanner(System.in);
System.out.println("Начать заново?(д/н)");
answer=scAns.nextLine();
// if(!"д".equals(answer)&&!"y".equals(answer)){
// System.out.println("Работа программы завершена");
// return;
// }
}while (equals(answer)||equals(answer));
}
static float plus(float a,float b){
return a+b;
}
static float multiPlus(float a,float b){
return a*b;
}
static float minus(float a,float b){
return a-b;
}
static float multiMinus(float a,float b){
return a/b;
}

}


public class User implements Serializable
{
    private String name;
    private String login;
    private String email;
    private int access;
    
    public static String[] type_of_access=new String[1000];
    public static int n=0,k=1;
    public static void beginWork()
    {
        User.type_of_access[0]="Гость"; 
        for(int i=1;i<1000;++i)
        {
            type_of_access[i]="Неопределен вид доступа";
        }
    }
    public void startWork()
    {
        BasicFrame programm = new BasicFrame();
        programm.startWork();
    }
    public static void main(String[] args)
    {
        new User.startWork();
    }
    public User()
    {
        name = "Неизвестно";
        login = "Неизвестно";
        email = "Неизвестно";
        access = 0;
    }
    public void setName(String name)
    {
 
    }
}

public class FXMLCalculatorController implements Initializable {

private TextArea t;

private TextField e;
float[]m;
float result;
int i=-1;
int[]oper;

private void resultButton(ActionEvent event) {
resultate();
}

private void plus(ActionEvent event){
fb(1,"+");
}

private void minus(ActionEvent event){
fb(2, "-");
}

private void gPlus(ActionEvent event){
fb(3, "*");
}

private void gMinus(ActionEvent event){
fb(4, "/");
}

private void clean(ActionEvent event){
clean();
}

private void keyAction(KeyEvent event){
switch(event.getText()){
case "+":
fb(1, "+");
break;
case "-":
fb(2, "-");
break;
case "*":
fb(3, "*");
break;
case "/":
fb(4, "/");
break;
case "=":
resultate();
break;
case "c":
clean();
break;
case "с":
clean();
break;
default:
break;
}
if(event.getCode().getName().equals("Enter")){
resultate();
}
if(event.getCode().getName().equals("Delete")){
clean();
}
}

private void keyPostAction(KeyEvent event){
if(event.getText().equals("*")||event.getText().equals("/")||
event.getText().equals("c")||event.getText().equals("с")) {
e.setText("");
}
if(e.getText().contains("=")){
e.setText(e.getText().substring(1));
}
}
void resultate(){
i++;
if(i>19){
alertWindow("Угроза переполнения!","Внимание!");
return;
}
try{
m[i]=Float.parseFloat(e.getText());
}catch(NumberFormatException ex){
ex.getMessage();

e.setText("");
e.requestFocus();
return;
}
t.appendText(m[i]+"=");
switch (oper[0]){
case 1:result=m[0]+m[1];break;
case 2:result=m[0]-m[1];break;
case 3:result=m[0]*m[1];break;
case 4:result=m[0]/m[1];break;
}
for (int j=1;j<i+1;j++){
switch (oper[j]){
case 1:result+=m[j+1];break;
case 2:result-=m[j+1];break;
case 3:result*=m[j+1];break;
case 4:result/=m[j+1];break;
}
}
e.setText(result+"");
}
void fb(int n,String s){
i++;
if(i>18){

alertWindow("Угроза переполнения!","Внимание!");
return;
}
try{
m[i]=Float.parseFloat(e.getText());
}catch(NumberFormatException ex){
ex.getMessage();

e.setText("");
e.requestFocus();
return;
}
e.setText("");
e.requestFocus();
oper[i]=n;
t.appendText(m[i]+""+s);
}
void clean(){
i=-1;
result=0;
m=new float[20];
oper=new int[20];
t.setText("");
e.setText("");
e.requestFocus();
}
void alertWindow(String s,String str){
Alert alert = new Alert(AlertType.INFORMATION);
alert.setTitle(str);
alert.setHeaderText(null);
alert.setContentText(s);
alert.showAndWait();
}

public void initialize(URL url, ResourceBundle rb) {
m=new float[20];
oper=new int[20];
e.requestFocus();
}
}

 public class calcpi {
  
  public static int[][] main() 
    {

        int nums[] = new int[4];
        int[] nums2 = new int[5];

        sum(a, b).sum(a, b);  // 14
        sum(3, a);  // 9
        sum(5, 23); // 28

        // int.out.println("Hello");
        // out.int.out.println("Hello");
        System.out.println("Hello \"  /* ' ' */Java 15 from Netbeans!");
        // System.out.println('  \' " " \' ');

        String str1 = "lalala " + tmp + " lalala";

        int x, y;
        x = 10;
        y = 25;

        int xX = 5, yy = 4;



        boolean isActive = false;
        boolean isAlive = true;
        byte a = 3;
        byte b = 8;
        short a = 3;
        short b = 8;
        int a = 4;
        int b = 9;
        long a = 5;
        long b = 10;
        double x = 8.5;
        double y = 2.7;
        float x = 8.5f;
        float y = 2.7f;
        char c = 102;


        int num8 = 010;
        String name = "Tom";
        int age = 30;
        float height = 1.7f;
          
        System.out.printf("Name: %s  Age: %d  Height: %.2f \n", name, age, height, this);



        int c = a % b;
        int a = 8;
        int b = ++a;
        int a = 8;
        int b = a++;
        int b = --a;
        int b = a--;
        int c = a + 5 * ++b; 
        int x = 10 / 5 * 2;
        double d = 2.0 - 1.1;

        int test = (5) - a * 3 / 5 + s++;

        int a = b & a + 5;

        byte a = 12;
        System.out.println(~a);


        // int a = a>>>b;
        int b = a>>b;
        int c = a<<b;

        int a = (((a | c) & s) ^ (a&&b||a)) < 5;

        a = 5;
        a = 5.0;
        a = -5.33;
        A = CCCCCCCC - 4;
        AA = CCCCCCC + 4;
        AAA = CCCCCC * 4;
        AAAA = CCCCC / 4;
        AAAAA = CCCC % 4;
        AAAAAA = CCC ^ 4;
        AAAAAAA = CC & 4;
        AAAAAAAA = C | 4;
        B += 5 ^ DDDDDDDD;
        BB -= 5 / DDDDDDD;
        BBB *= 5 % DDDDDD;
        BBBB /= 5 + DDDDD;
        BBBBB %= 5 & DDDD;
        BBBBBB ^= 5 * DDD;
        BBBBBBB &= 5 | DD;
        BBBBBBBB |= 5 - D;
        --DEC;
        DEC--;
        ++INC;
        INC++;
        a = a + 5;
        a += 5;
        a = 3 * 3 % 5;

        c>>=b;
        c<<=b;
        c^=b;


        byte a = 3;
        short b = 4;
        byte c = (byte)(a+b);

        int d = "a" + 5;
        System.out.println(d);

        int num1 = 6;
        int num2 = 4;
        if(num1>num2){
            System.out.println("Первое число больше второго");
        }
        else{
            System.out.println("Первое число меньше второго");
        }

        if(num1 > num2 && num1>7){
            System.out.println("Первое число больше второго и больше 7");
        }


        int num = 3;
        int output = 0;
        switch(num){
             
            case 1: 
                output = 3;
                break;
            case 2: 
            case 3: 
            case 4: 
                output = 6;
                break;
            case 5: 
                output = 12;
                break;
            default:
                output = 24;
        }
        int z = x<y? (x+y) : (x-y);

        for (int i = 1; i < 9; i++){
            System.out.printf("Квадрат числа %d равен %d \n", i, i * i);
        }



        for (; i<9;){
            System.out.printf("Квадрат числа %d равен %d \n", i, i * i);
            i++;
        }

        for (; ;){
            System.out.printf("Квадрат числа %d равен %d \n", i, i * i);
        }


        int a = /*no */ 5 + /*sdfsdf*/ 5;


        do{
            System.out.println(j);
            j--;
        }
        while (j > 0);


        while (j > 0){
         
            System.out.println(j);
            j--;
        }


        for (int i = 0; i < 10; i++){
            if (i == 5)
                break;
        }

        for (int i = 0; i < 10; i++){
            if (i == 5)
                continue;
        }

        int nums[] = new int[4];
        int[] nums2 = new int[5];


        int[] nums = new int[] { 1, 2, 3, 5 };
        int[] nums2 = { 1, 2, 3, 5 };




        int[] nums1 = new int[] { 0, 1, 2, 3, 4, 5 };
         
        int[][] nums2 = { { 0, 1, 2 }, { 3, 4, 5 } };


        int[] array = new int[] { 1, 2, 3, 4, 5 };



        int[][] nums = new int[][] 
        { 
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        for (int i = 0; i < nums.length; i++){
            for(int j=0; j < nums[i]; j++){
                     
                System.out.printf("%d ", nums[i][j]);
            }
            System.out.println();
        }


        HashMap<String, Integer> fruits = new HashMap();
        fruits.put("Количество апельсинов", 5);
        fruits.put("Количество яблок", 10);
        fruits.put("Количество мандаринов", 7);
        System.out.println(fruits.get("Количество мандаринов"));



        arr[0][1] = 3;
        arr[0][1][0] = 3;
        try{
            int[] numbers = new int[3];
            numbers[4]=45;
            System.out.println(numbers[4]);
        }
        catch(Exception ex){
             
            ex.printStackTrace();
        }
        finally{
            System.out.println("Блок finally");
        }



        try{
            numbers[6]=45;
            numbers[6]=Integer.parseInt("gfd");
        }
        catch(ArrayIndexOutOfBoundsException ex){
                     
            System.out.println("Выход за пределы массива");
        }
        catch(NumberFormatException ex){
                     
            System.out.println("Ошибка преобразования из строки в число");
        }



        try{
            Scanner in = new Scanner(System.in);
            int x = in.nextInt();
            if(x>=30){
               // throw new Exception("Число х должно быть меньше 30");
           }
        }
        catch(Exception ex){
             
            System.out.println(ex.getMessage());
        }

        a = (int) ((0.1+0.7) * 10);


        a = (boolean) 1;
        a = (int) (25/7);
        // a = (int) (2.5/2 + 4) - (int) "5";
        a = (int) (2.5/2 + 4 - "5");
        a = (int) 2.5/2 + 4 - "5";
        f = (double)(d++);
        g = (double)(++e);



        if(test()) { if(!test()) { } }

        if(a) { }
        else if(a == "l")
        {
            if(a[5] != "lala") { }
            else if(true) { }
            
        }


        Object kate = new Client("Kate", "DeutscheBank", 2000);

        Object sam = new Employee("Sam", "Oracle");

        // final int LIMIT = 5;
        System.out.println(LIMIT);  // 5
        if(CONSTANT) {}
        else if(CONSTANT == 5) {}
        else if(CONSTANT == "lala") {}


            a = 5;
        a = 5.0;
        a = -5.33;
        
        A = CCCCCCCC - 4;
        AA = CCCCCCC + 4;
        AAA = CCCCCC * 4;
        AAAA = CCCCC / 4;
        AAAAA = CCCC % 4;
        AAAAAA = CCC ^ 4;
        AAAAAAA = CC & 4;
        AAAAAAAA = C | 4;

        B += 5 ^ DDDDDDDD;
        BB -= 5 / DDDDDDD;
        BBB *= 5 % DDDDDD;
        BBBB /= 5 + DDDDD;
        BBBBB %= 5 & DDDD;
        BBBBBB ^= 5 * DDD;
        BBBBBBB &= 5 | DD;
        BBBBBBBB |= 5 - D;

        --DEC;
        DEC--;
        ++INC;
        INC++;

        a = a + 5;
        a += 5;

        a = 3 * 3 % 5; 

        _a = __;


        q123 = !(--DEC) + -5;
        w234 += DEC-- - --DEC_2;
        FF = ++INC ^ -c;
        R = 5 + -6 - 8 + 4;
        XxXxX = 100 - -c * 55 + ++f;
        _qwqw ^= (d + dd) / 38;
        

        c = a++;
        f = (double)d++;

        A = 5 >> c;

        g &= --g | g;
        d |= -5&-gg;
        sd = g | d| d|dd;
        sd = g & d& d&dd;

        a = (false && foo() + 1);
        b = (true  || foo());

        a = true ? 0 : true ? 1 : 2;

        return; 
        return 0;
        return a;
        return a + sF;
        return s;








        if (a > b)
        { }

        if (a > b);

        if (a > b)
            a= "a больше b";

        if (a > b) {
            a= "a больше b";
            b = a;
        }

        //------------------------

        if (a > b) {
            b = a;
        } 
        else
        {
            if (a > b) {
                b = a;
            } 
            
            b = a;

            if (a > b)
                b = a;
            else
            {
                if (a > b) {
                    b = a;
                } 
                b = a;
            }
        }

        //------------------------

        if (a > b) {
            a= "a больше, чем b";
        }
        else if (1) {
        }
        else{
            a= "else"; }

        //------------------------

        if (a > b) {
            a= "a больше, чем b";
        }
        else if (a == 5)
        {a= "a == 5";}
        else {
          a= "a меньше, чем b";
        }

        //------------------------

        if (a > b) {
            {{a= "a больше, чем b";}}
        }
        else if (a == b)
            a= "a равен b";

        //------------------------

        while(1)
        {
            a = 1;
        }

        while(a);

        i = 1;
        while (i <= 10) {
            a= i++; 
        }
        //------------------------

        do {
            if (i < 5) {
                a= "i еще недостаточно велико";
                break;
            }
            i *= factor;
            if (i < minimum_limit) {
                break;
            }
            a= "значение i уже подходит";
        } while (0);

        do {

        } while (0);

        //------------------------

        for (i = 1; i <= 10; i++);

        for (i = 1; i <= 10; i++)
        { }


        for (i = 1; i <= 10; i++) {
            a= i;
        }

        for (i = 1; ; i++) {
            if (i > 10) {
                break;
            }
            a= i;
        }

        i = 1;
        for (; ; ) {
            if (i > 10) {
                break;
            }
            a= i;
            i++;
        }

        for(i = 0, size = count(people); i < size; ++i) {
            people[i][6] = mt_rand(000000, 999999);
        }


        for (i = 1, j = 0; i <= 10; a= i);

        for (i = 1, j = 0; i <= 10; j += i, a= i);

        for (i = 1, j = 0; i <= 10; a= i, j += i);

        for (i = 1, j = 0; i <= 10; a= i, j += i, i++);

        for (i = 1, j = 0; i <= 10; j += i, a= i, i++);

        for (i = 1, j = 0; i <= 10; j += i, i++, a= i);

        //------------------------

        switch (i) {
            case 0:
                a= "i равно 0";
                a= "i равно 0";
                break;
            case 1:
                a= "i равно 1";
                break;
            case 2:
                a= "i равно 2";
                break;
        }

        switch (i) {
            case 0:
                a= "i равно 0";
            case 1:
                a= "i равно 1";
            case 2:
                a= "i равно 2";
        }

        switch (i) {
            case "яблоко":
                a= "i это яблоко";
                break;
            case "шоколадка":
                a= "i это шоколадка";
                break;
            case "пирог":
                a= "i это пирог";
                break;
        }

        switch (i) {
            case 0:
            case 1:
            case 2:
                break;
            case 3:
                a= "i равно 3";
            default:
                a= "i не равно 0, 1 или 2";
        }



        //------------------------

        return;
        return null;
        return true;
        return false;
        return 0;
        return a;
        return "aaa";
        return "aaa";

        return a + 5;
        return (a + 5);
        return (a + 5) == 0;

        //------------------------

        if(1)
        {}
        else if(sA)
        {
            if(AA >= 5)
                a--;
            if(AAA < AA) {}
            else if(AAAA == -1)
            {
                // a= a+=c;
            }
        }
        else if(a == -12)
        {
            a= 0;
            if(!C)
            {
                while (a == 3);
                while(b || c == 8){}
                while(c && a > 5){;}
            }

            IFIFIFIFIIFF = 5;
        }

        while(g5 ^= 3)
        {
            // a= a+=c;
            a= a--+c;

            switch (a) {
                case "value":
                    
                    break;
                
                default:
                    break;
            }
        }

        if(5 && f-- == h)
        {}
        else
        {
            while (aWhile != 0) 
            {
                if(5)
                {
                    {
                        {{{a = c;}}}
                    }
                }
                else if(2 < 5 && c < (255))
                {
                    a == b;
                }
                AFTER_IF_ELSE = 100;
            }
            
            BETWEEN_WHILE = 1;
            
            while(4   >   (a--)*B )
            {
                a= a;
                if(1) sC +=a;
                a= while_;
            }
        }

    }
         
    

     public static void main(String[] args) {
        System.out.println((10.5 + 2 * 3) / (45 - 3.5));
         int i;
         UDChar pi, frac;
         System.out.println("Программировать весело!");
         java.lang.String StrPI="PI=";
         Date now = new Date();
         System.out.println(now);
         
         pi = new UDChar(2);
         frac = new UDChar(2);
         for (i=1; i <3000; i++){
             frac.mulEntiere(i);
             frac.divEntiere(2*i +1);
             pi.add(frac);
         }
         now = new Date();
         System.out.println(now);
         System.out.println("PI="+ (int)pi);
         System.out.println("frac="+ frac);
         int[] a = new int[10];
         UDChar pi, frac;
         System.out.println("Программировать весело!");
         java.lang.String StrPI="PI=";
         Date now = new Date();
         System.out.println(now);

         pi = new UDChar(2);
         frac = new UDChar(2);
         // i < 3000;
         // Пихнуть new в for
         for (i=1; i < 3000; i++){
             frac.mulEntiere(i);
             frac.divEntiere(2*i +1);
             pi.add(frac);
         }
         now = new Date();
     }
 }
 /**********************fichier UDChar.java**************************/
 /**
 * @author cyberfastfred
 * Created on 23 janv. 2005
 * implementation basique orientee pour le calcul de pi a 100 decimale
 * La serie calculant pi n'ajoutant que des nombre fractionnaires de plus en plus petit
 * Les grands nombres sont uniquement positifs
 */
 public class UDChar {
     public static final int PRECISION = 1000;
     /*nombre de chiffres*/
     public static final int PRECISION = 1000;
  
     protected char chiffres  = new char [PRECISION];
     /* 10 chiffres avant la virgule PRECISION-10 chiffres apres */
     
     /*cree un grand decimal a partir d'un int
      *
      */     
     public UDChar(int entier){
         int i;
         /*
 * Initiailisation de la partie entiere
 */
          for (i=9; i>=0; i--){
              int chiffre;
              chiffre = entier / 10;
              chiffres[i] = intToChiffre(chiffre);
  
              entier /=10;
          }
          /*mise a 0 des decimales*/
          for (i=10; i<PRECISION; i++) chiffres[i]=0;
     }
     
     /*
      * Ajoute l'operande Ultradecmal
      */
     public void add(UDChar operande) {
         int i, somme, retenue;
         retenue = 0;
         for(i = PRECISION - 1; i >= 0; i--){
             somme = chiffreToInt(chiffres[i])
              + chiffreToInt(operande.chiffres[i])
                  + retenue;
             retenue = somme / 10;
             somme %= 10;
             chiffres[i] = intToChiffre(somme);
         }
     }
  
     /*
      * Soustrait l'operande UltraDecimal
      */
     public void sub(UDChar operande) {
         int i, retrait, retenue;
         retenue = 0;
         for(i = PRECISION - 1; i >= 0; i--){
             retrait = 10 + chiffreToInt(chiffres[i])
              - chiffreToInt(operande.chiffres[i])
                  - retenue;
             retenue = 1 - (retrait / 10);
             retrait %= 10;
             chiffres[i] = intToChiffre(retrait);
         }
         
     }
  
     /*
      * multiplication d'un UD par un entier
      * suffisant pour le calcul de series simples
      */
     public void mulEntiere(int operande){
         UDChar partiel, original;
         int i, chiffre, operandeSuiv;;
         original = this.dupl();
         
         /* remise a zero de l'UD */
         for (i=0; i<PRECISION; i++) chiffres[i]="0";
         
         operandeSuiv = operande;
         for (i=0; i <10 ;i++){
             partiel = original.dupl();
             chiffre = operandeSuiv % 10;
             operandeSuiv /=10;
             partiel.mulUnit(chiffre);
             this.add(partiel);
             original.shiftLeft(1);
         }
     }
  
     /*
      * multiplication d'un UD par un entier
      * suffisant pour le calcul de series simples
      */
     public void divEntiere(int operande){
         int i, reste, result;
         reste = 0;
         result = 0;
         for (i = 0; i <PRECISION; i++){
             reste = reste * 10 + chiffreToInt(chiffres[i]);
             result = reste / operande;
             reste = reste % operande;
             chiffres[i] = intToChiffre(result);
         }
         
     }
  
     /*
      * Renvoie une chaine cotenant le nombre represente
      */
     public String toString() {
         String str= new String("");
         int i;
         for(i=0; i<10; i++){
             str = str + chiffres[i];
         }
         str = str +",";
         for(i=10; i<PRECISION; i++){
             if (i%80==0)str=str+"\n";
             str = str + chiffres[i];
         }
         return str;
     }
     /*
      * clone un UD
      */
     private UDChar dupl(){
         UDChar ud = new UDChar(0);
         ud.add(this); /* pas optimal mais facile */
         return ud;
     }
     
     /*
      * decalage a droite
      * equivalent a multiplication par 10 puissance pas
      */
     private void shiftRight(int pas){
         int i;
         if (pas <= 0) return;
         if (pas > PRECISION) pas = PRECISION;
         for (i = pas; i <PRECISION; i++){
             chiffres[i] = chiffres[i-pas];
         }
         for (i = 0; i < pas; i++){
             chiffres[i] = "0";
         }
     }
     
     /*
      * decalage a gauche
      * equivalent a multiplication par 10 puissance pas
      */
     private void shiftLeft(int pas){
         int i;
         if (pas <= 0) return;
         if (pas > PRECISION) pas = PRECISION;
         for (i = 0; i < PRECISION-pas; i++){
             chiffres[i] = chiffres[i+pas];
         }
         for (i = PRECISION-pas; i <PRECISION; i++){
             chiffres[i] = "0";
         }
     }
     
     /*
      * convertie un chiffre sous forme de char en entier
      */
     private int chiffreToInt(char chiffre){
         switch(chiffre){
             case 0:
                 return(0);
             case 1:
                 return(1);
             case 2:
                 return(2);
             case 3:
                 return(3);
             case 4:
                 return(4);
             case 5:
                 return(5);
             case 6:
                 return(6);
             case 7:
                 return(7);
             case 8:
                 return(8);
             case 9:
                 return(9);
             default:
                 return(0);
         }
     }
     
     /*
      * Convertie un entier de 0 a 9 en char
      */
     private char intToChiffre(int chiffre){
         switch(chiffre){
             case 0:
              return(0);
             case 1:
                  return("1");
             case 2:
                  return("2");
             case 3:
                  return("3");
             case 4:
                  return("4");
             case 5:
                  return("5");
             case 6:
                  return("6");
             case 7:
                  return("7");
             case 8:
                  return("8");
             case 9:
                  return("9");
             default:
                 return("0");
         }
     }
     
     /*
      * multiplie par un chiffre de 0 a 9
      */
     private void mulUnit(int operande){
         int chiffre, i, resultat, retenue;
         chiffre = operande%10;
         retenue = 0;
         for(i = PRECISION - 1; i >= 0; i--){
             resultat = chiffreToInt(chiffres[i])
                  * chiffre
                  + retenue;
             retenue = resultat / 10;
             resultat %= 10;
             chiffres[i] = intToChiffre(resultat);
         }
     }
  
 }

public class Welcome
{
    public static void main(String[] args)
    {
        // Показать в консоли сообщение Welcome to Java!
        System.out.println("Welcome to Java!");
    }
}

public class WelcomeWithThreeMessages
{
 
    public static void main(String[] args)
    {
        System.out.println("Программировать весело!");
        System.out.println("Сначала основы");
        System.out.println("Problem Driven");
    }
}

public class ComputeExpression
{
 
    public static void main(String[] args)
    {
        System.out.println((10.5 + 2 * 3) / (45 - 3.5));
    }
}


public class Test
{
 
    public static void main(String[] args)
    {
        System.out.println("3.5 * 4 / 2 – 2.5 равно ");
        System.out.println(3.5 * 4 / 2 - 2.5);
    }
}

public class AverageOfNumbers {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please enter the total number of integers.");
        int count = scanner.nextInt();

        int sum = 0;

        for (int i = 0; i < count; i++) {
            System.out.println("Please enter number " + (i + 1) + ":");
            sum += scanner.nextInt();
        }
        System.out.println("Sum=" + sum + ",Count=" + count);

        BigDecimal average = new BigDecimal((double) sum / count);
        average = average.setScale(2, RoundingMode.HALF_UP);
        System.out.println("Average of entered numbers = " + average);
        scanner.close();
    }
}

public class SwappingNumbers {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the first number:");
        int first = scanner.nextInt();
        System.out.println("Enter the second number:");
        int second = scanner.nextInt();
        scanner.close();

        System.out.println("Initial value of numbers are: "+first+" and "+second);
        
        first = first + second;
        second = first -second;
        first = first - second;
        
        System.out.println("Value of numbers after swapping are: "+first+" and "+second);

    }

}


/*
 [The "BSD license"]
  Copyright (c) 2013 Terence Parr
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
  3. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// adsasd
// import org.antlr.v4.runtime.ANTLRFileStream;
// import org.antlr.v4.runtime.BailErrorStrategy;
// import org.antlr.v4.runtime.CommonTokenStream;
// import org.antlr.v4.runtime.DiagnosticErrorListener;
// import org.antlr.v4.runtime.Lexer;
// import org.antlr.v4.runtime.ParserRuleContext;
// import org.antlr.v4.runtime.atn.LexerATNSimulator;
// import org.antlr.v4.runtime.atn.PredictionMode;

// import java.io.File;
// import java.lang.System;
// import java.util.ArrayList;
// import java.util.List;
// import java.util.concurrent.BrokenBarrierException;
// import java.util.concurrent.CyclicBarrier;

/* This more or less duplicates the functionality of grun (TestRig) but it
 * has a few specific options for benchmarking like -x2 and -threaded.
 * It also allows directory names as commandline arguments. The simplest test is
 * for the current directory:

~/antlr/code/grammars-v4/java $ java Test .
/Users/parrt/antlr/code/grammars-v4/java8/JavaBaseListener.java
/Users/parrt/antlr/code/grammars-v4/java8/Java8Lexer.java
/Users/parrt/antlr/code/grammars-v4/java8/JavaListener.java
/Users/parrt/antlr/code/grammars-v4/java8/JavaParser.java
/Users/parrt/antlr/code/grammars-v4/java8/Test.java
Total lexer+parser time 1867ms.
 */
class Test {
//  public static long lexerTime = 0;
    public static boolean profile = false;
    public static boolean notree = false;
    public static boolean gui = false;
    public static boolean printTree = false;
    public static boolean SLL = false;
    public static boolean diag = false;
    public static boolean bail = false;
    public static boolean x2 = false;
    public static boolean threaded = false;
    public static boolean quiet = false;
//  public static long parserStart;
//  public static long parserStop;
    public static Worker[] workers = new Worker[3];
    static int windex = 0;

    public static CyclicBarrier barrier;

    public static volatile boolean firstPassDone = false;

    public static class Worker implements Runnable {
        public long parserStart;
        public long parserStop;
        List<String> files;
        public Worker(List<String> files) {
            this.files = files;
        }
        // @Override
        public void run() {
            parserStart = System.currentTimeMillis();
            // for (String f : files) {
            //     parseFile(f);
            // }
            parserStop = System.currentTimeMillis();
            try {
                barrier.await();
            }
            catch (InterruptedException ex) {
                return;
            }
            catch (BrokenBarrierException ex) {
                return;
            }
        }
    }

    public static void main(String[] args) {
        doAll(args);
    }

    public static void doAll(String[] args) {
        List<String> inputFiles = new ArrayList<String>();
        long start = System.currentTimeMillis();
        try {
            if (args.length > 0 ) {
                // for each directory/file specified on the command line
                // for(int i=0; i< args.length;i++) {
                //     if ( args[i].equals("-notree") ) notree = true;
                //     else if ( args[i].equals("-gui") ) gui = true;
                //     else if ( args[i].equals("-ptree") ) printTree = true;
                //     else if ( args[i].equals("-SLL") ) SLL = true;
                //     else if ( args[i].equals("-bail") ) bail = true;
                //     else if ( args[i].equals("-diag") ) diag = true;
                //     else if ( args[i].equals("-2x") ) x2 = true;
                //     else if ( args[i].equals("-threaded") ) threaded = true;
                //     else if ( args[i].equals("-quiet") ) quiet = true;
                //     if ( args[i].charAt(0)!='-' ) { // input file name
                //         inputFiles.add(args[i]);
                //     }
                // }
                List<String> javaFiles = new ArrayList<String>();
                // for (String fileName : inputFiles) {
                //     List<String> files = getFilenames(new File(fileName));
                //     javaFiles.addAll(files);
                // }
                doFiles(javaFiles);

//              DOTGenerator gen = new DOTGenerator(null);
//              String dot = gen.getDOT(Java8Parser._decisionToDFA[112], false);
//              System.out.println(dot);
//              dot = gen.getDOT(Java8Parser._decisionToDFA[81], false);
//              System.out.println(dot);

                if ( x2 ) {
                    System.gc();
                    System.out.println("waiting for 1st pass");
                    if ( threaded ) while ( !firstPassDone ) { } // spin
                    System.out.println("2nd pass");
                    doFiles(javaFiles);
                }
            }
            else {
                System.err.println("Usage: java Main <directory or file name>");
            }
        }
        catch(Exception e) {
            System.err.println("exception: "+e);
            e.printStackTrace(System.err);   // so we can get stack trace
        }
        long stop = System.currentTimeMillis();
//      System.out.println("Overall time " + (stop - start) + "ms.");
        System.gc();
    }

    public static void doFiles(List<String> files) /*throws Exception */{
        long parserStart = System.currentTimeMillis();
//      lexerTime = 0;
        if ( threaded ) {
            // barrier = new CyclicBarrier(3,new Runnable() {
            //     public void run() {
            //         report(); firstPassDone = true;
            //     }
            // });
            int chunkSize = files.size() / 3;  // 10/3 = 3
            int p1 = chunkSize; // 0..3
            int p2 = 2 * chunkSize; // 4..6, then 7..10
            workers[0] = new Worker(files.subList(0,p1+1));
            workers[1] = new Worker(files.subList(p1+1,p2+1));
            workers[2] = new Worker(files.subList(p2+1,files.size()));
            // new Thread(workers[0], "worker-"+windex++).start();
            // new Thread(workers[1], "worker-"+windex++).start();
            // new Thread(workers[2], "worker-"+windex++).start();
        }
        else {
            // for (String f : files) {
            //     parseFile(f);
            // }
            long parserStop = System.currentTimeMillis();
            System.out.println("Total lexer+parser time " + (parserStop - parserStart) + "ms.");
        }
    }

    private static void report() {
//      parserStop = System.currentTimeMillis();
//      System.out.println("Lexer total time " + lexerTime + "ms.");
        long time = 0;
        if ( workers!=null ) {
            // compute max as it's overlapped time
            for (Worker ws;;) {
                long wtime = w.parserStop - w.parserStart;
                time = Math.max(time,wtime);
                System.out.println("worker time " + wtime + "ms.");
            }
        }
        System.out.println("Total lexer+parser time " + time + "ms.");

        System.out.println("finished parsing OK");
        System.out.println(LexerATNSimulator.match_calls+" lexer match calls");
        System.out.println(ParserATNSimulator.predict_calls +" parser predict calls");
        System.out.println(ParserATNSimulator.retry_with_context +" retry_with_context after SLL conflict");
        System.out.println(ParserATNSimulator.retry_with_context_indicates_no_conflict +" retry sees no conflict");
        System.out.println(ParserATNSimulator.retry_with_context_predicts_same_alt +" retry predicts same alt as resolving conflict");
    }

/*ОШИБКА return type*///    public static getFilenames(File f){
        // List<String> files = new ArrayList<String>();
        // getFilenames_(f, files);
        // return files;
    // }

    public static void getFilenames_(File f, List<String> files) /*throws Exception*/ {
        // If this is a directory, walk each file/dir in that directory
        if (f.isDirectory()) {
            String flist[] = f.list();
            for(int i=0; i < flist.length; i++) {
                getFilenames_(new File(f, flist[i]), files);
            }
        }

        // otherwise, if this is a java file, parse it!
        // else if ( ((f.getName().length()>5) &&
        //     f.getName().substring(f.getName().length()-5).equals(".java")) )
        // {
        //     files.add(f.getAbsolutePath());
        // }
    }

    // This method decides what action to take based on the type of
    //   file we are looking at
//  public static void doFile_(File f) throws Exception {
//      // If this is a directory, walk each file/dir in that directory
//      if (f.isDirectory()) {
//          String files[] = f.list();
//          for(int i=0; i < files.length; i++) {
//              doFile_(new File(f, files[i]));
//          }
//      }
//
//      // otherwise, if this is a java file, parse it!
//      else if ( ((f.getName().length()>5) &&
//          f.getName().substring(f.getName().length()-5).equals(".java")) )
//      {
//          System.err.println(f.getAbsolutePath());
//          parseFile(f.getAbsolutePath());
//      }
//  }

    public static void parseFile(String f) {
        try {
            if ( !quiet ) System.err.println(f);
            // Create a scanner that reads from the input stream passed to us
            Lexer lexer = new Java8Lexer(new ANTLRFileStream(f));

            CommonTokenStream tokens = new CommonTokenStream(lexer);
//          long start = System.currentTimeMillis();
//          tokens.fill(); // load all and check time
//          long stop = System.currentTimeMillis();
//          lexerTime += stop-start;

            // Create a parser that reads from the scanner
            Java8Parser parser = new Java8Parser(tokens);
            if ( diag ) parser.addErrorListener(new DiagnosticErrorListener());
            if ( bail ) parser.setErrorHandler(new BailErrorStrategy());
            // if ( SLL ) parser.getInterpreter().setPredictionMode(PredictionMode.SLL);

            // start parsing at the compilationUnit rule
            ParserRuleContext t = parser.compilationUnit();
            if ( notree ) parser.setBuildParseTree(false);
            if ( gui ) t.inspect(parser);
            if ( printTree ) System.out.println(t.toStringTree(parser));
        }
        catch (Exception e) {
            System.err.println("parser exception: "+e);
            e.printStackTrace();   // so we can get stack trace
        }
    }
}

