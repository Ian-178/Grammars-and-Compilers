Задание: на базе I работы спроектировать и реализовать язык работы с полиномами, который был бы удобен.

Требования:
	1) Продуманный синтаксис. Для максимального удобства синтаксис должен быть максимально похож на математический. Иначе говоря, было бы очень неплохо, если некоторые операции умножения можно опускать: не 2x*(x+1), а 2x(x+1). Это необязательное требование, но, если вы хотите спроектировать действительно удобный язык, то лучше применять общепринятые правила записи операций с полиномами


	2) Появляются полиномы от разных переменных (x, y, z и т.п.). Если в выражении участвует одна переменная, то все должно посчитаться без ошибок. Если в выражении появляются разные переменные, например, (2x+1)*(y-x), то то вашему желанию можно или выводить ошибку, или же посчитать правильный результат (2xy-2x^2+y-x).


	3) Появляются переменные, которым можно присваивать полиномы. Например,
	$A=x+1
	означает, что переменной $A присваивается x+1. Далее, в любом месте, где можно использовать полином в явном виде, можно использовать переменную типа полином.
	Также, переменную можно выводить на экран. Синтаксис самих переменных, оператора присваивания и вывода на печать придумайте исходя из удобства языка.


	4) Теперь программа на вашем языке должна помещаться во входной файл (а не просто в stdin), откуда она считывается и исполняется.


	5) Появляются развернутые сообщения об ошибках с указанием номера строки, где они произошли. Как минимум, должны появиться по 2-3 сообщения для каждого типа возможных ошибок
		а) лексические. Определяются на этапе лексического анализа (lex)
		б) синтаксические. Определяются на этапе синтаксического анализа (yacc)
		в) семантические. Определяются на этапе исполнения


По поводу ошибок.
Сообщения об ошибках должны быть осмысленные и адекватные. Например, нужно указывать номер строки и иную информацию, для локализации ошибки. Также необходим чёткий и понятный текст в сообщении об ошибке.
